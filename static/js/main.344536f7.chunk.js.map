{"version":3,"sources":["img/facebook.svg","img/twitter.svg","img/linkedin.svg","img/stack-overflow.svg","pages/home.js","Menu.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","src","logo","alt","href","target","rel","Footer","facebook","twitter","linkedin","stackoverflow","withRouter","_ref","location","build_default","Link","config","push","menu","text","link","submenu","header","width","height","footer","Menu_Footer","Page","id","Fragment","App","react_router_dom","basename","src_Menu","react_router","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4OCwBzBC,MArBf,WAEC,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACxCN,EAAAC,EAAAC,cAAA,yBACcF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,qDAEpBF,EAAAC,EAAAC,cAAA,KACCC,UAAU,WACVI,KAAK,+DACLC,OAAO,SACPC,IAAI,uBAJL,wHCwBH,IAAMC,EAAS,WACd,OACCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,OAAKE,IAAKO,IAAUL,IAAI,cAEzBN,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,OAAKE,IAAKQ,IAASN,IAAI,aAExBN,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,OAAKE,IAAKS,IAAUP,IAAI,cAEzBN,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,OAAKE,IAAKU,IAAeR,IAAI,sBAOnBS,cA/Cf,SAAAC,GAA0B,IAAXC,EAAWD,EAAXC,SAEd,OACCjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACCkB,KAAMA,IACNF,SAAUA,EACVG,OAAQ,CACPC,MAAM,GAEPC,KAAM,CACL,CAACC,KAAM,OAAQC,KAAM,KACrB,CAACD,KAAM,QAASC,KAAM,QAASC,QAAS,CACvC,CAACF,KAAM,SAAUC,KAAM,WACvB,CAACD,KAAM,SAAUC,KAAM,aAExB,CAACD,KAAM,aAAcC,KAAM,aAE5BE,OACC1B,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,qBAAqBG,IAAI,OAAOqB,MAAM,MAAMC,OAAO,QAE9EC,OAAQ7B,EAAAC,EAAAC,cAAC4B,EAAD,gBCXX,IAAMC,EAAO,SAAAf,GAAU,IAARgB,EAAQhB,EAARgB,GACd,OACChC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgC,SAAA,KACCjC,EAAAC,EAAAC,cAAA,kBAAU8B,GACVhC,EAAAC,EAAAC,cAAA,4DAKYgC,EArBf,WACE,OACDlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAQC,SAAS,iCAChBpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWzC,IAC3BC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWT,OCFlBU,QACW,cAA7BC,OAAOzB,SAAS0B,UAEe,UAA7BD,OAAOzB,SAAS0B,UAEhBD,OAAOzB,SAAS0B,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInB5D,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.344536f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/facebook.d49de3fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.3417388f.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.5c242f84.svg\";","module.exports = __webpack_public_path__ + \"static/media/stack-overflow.c339e04a.svg\";","import React from 'react';\nimport logo from './../logo.svg';\n\nfunction Home() {\n\t\n\treturn(\n\t\t<div className=\"main\">\n\t\t\t<h1>React Offcanvas Menu</h1>\n\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<p>\n\t\t\t\t\tget it with: <br/><code>npm i react-offcanvas-menu-component</code>\n\t\t\t\t</p>\n\t\t\t<a\n\t\t\t\tclassName=\"App-link\"\n\t\t\t\thref=\"https://www.npmjs.com/package/react-offcanvas-menu-component\"\n\t\t\t\ttarget=\"_blank\"\n\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t>\n\t\t\t\tdocumentation and description\n\t\t\t</a>\n\t\t</div>\n\t)\n}\n\nexport default Home;","import React from 'react';\nimport {Link, withRouter} from 'react-router-dom';\n\nimport logo from './logo.svg';\nimport facebook from './img/facebook.svg';\nimport twitter from './img/twitter.svg';\nimport linkedin from './img/linkedin.svg';\nimport stackoverflow from './img/stack-overflow.svg';\n\nimport OffcanvasMenu from 'react-offcanvas-menu-component';\n\nfunction Menu({location}) {\n\n\treturn(\n\t\t<OffcanvasMenu\n\t\t\tLink={Link}\n\t\t\tlocation={location}\n\t\t\tconfig={{\n\t\t\t\tpush: true\n\t\t\t}}\n\t\t\tmenu={[\n\t\t\t\t{text: 'Home', link: '/'},\n\t\t\t\t{text: 'Pages', link: '/page', submenu: [\n\t\t\t\t\t{text: 'Page 1', link: '/page/1'},\n\t\t\t\t\t{text: 'Page 2', link: '/page/2'}\n\t\t\t\t]},\n\t\t\t\t{text: 'Contact Us', link: '/contact'}\n\t\t\t]}\n\t\t\theader={\n\t\t\t\t<img src={logo} className=\"App-logo menu-logo\" alt=\"logo\" width=\"250\" height=\"100\" />\n\t\t\t}\n\t\t\tfooter={<Footer />}\n\t\t/>\n\t)\n}\n\nconst Footer = () => {\n\treturn(\n\t\t<div className=\"social-wrap\">\n\t\t\t<h4>Socia Networks Footer</h4>\n\t\t\t<ul className=\"social\">\n\t\t\t\t<li>\n\t\t\t\t\t<img src={facebook} alt=\"facebook\" />\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<img src={twitter} alt=\"twitter\" />\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<img src={linkedin} alt=\"linkedin\" />\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<img src={stackoverflow} alt=\"stackoverflow\" />\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t)\n}\n\nexport default withRouter(Menu);","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport Home from './pages/home';\nimport Menu from './Menu';\n\nimport './App.css';\n\nfunction App() {\n  return (\n\t<Router basename=\"/react-offcanvas-menu-example\">\n\t\t<div className=\"App\">\n\t\t\t<Menu />\n\t\t\t<Route path=\"/\" component={Home} />\n\t\t\t<Route path=\"/page/:id\" component={Page} />\n\t\t</div>\n\t</Router>\n  );\n}\n\nconst Page = ({id}) => {\n\treturn(\n\t\t<>\n\t\t\t<h3>Page {id}</h3>\n\t\t\t<p>Lorem ipsum doloret lorem ipsum ipsum dolorem</p>\n\t\t</>\n\t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}